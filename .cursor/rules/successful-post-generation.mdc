# Successful Post Generation Format

## üéØ PROVEN WORKING METHOD

**CRITICAL**: Use this exact format for generating posts - it actually delivers 10 diverse images, not just cover slides.

### ‚úÖ Working Approach (Use This)
- **Direct Database Query**: Query images table directly with account aesthetics
- **10 Diverse Images**: Select 10 unique images with variety
- **Multiple Aesthetics**: Mix of streetwear, vintage, minimalist, etc.
- **Real Database Images**: Use actual image IDs from database
- **Account Profile Integration**: Use `account_profiles` table data

### ‚ùå Avoid These Approaches
- **UnifiedSmartContentGenerator**: Too restrictive, only finds cover slides
- **Theme-based filtering**: Limits variety and image count
- **Hook slide dependencies**: Unreliable, often fails
- **Complex scoring systems**: Over-engineered, doesn't deliver results

### üìã Working Implementation Steps

1. **Get Account Profile**:
```javascript
const { data: accountProfile } = await supabase
  .from('account_profiles')
  .select('*')
  .eq('username', accountUsername)
  .single();
```

2. **Query Diverse Images**:
```javascript
const accountAesthetics = accountProfile.content_strategy?.aestheticFocus || ['streetwear', 'minimalist', 'aesthetic'];
const { data: images } = await supabase
  .from('images')
  .select('*')
  .in('aesthetic', accountAesthetics)
  .limit(100);
```

3. **Select 10 Diverse Images**:
```javascript
const shuffledImages = images.sort(() => Math.random() - 0.5);
const selectedImages = shuffledImages.slice(0, 10).map((img, index) => ({
  id: img.id,
  imagePath: img.image_path,
  aesthetic: img.aesthetic || 'mixed',
  is_cover_slide: index === 0
}));
```

4. **Create Preview Batch**:
```javascript
const batchId = `diverse_${Date.now()}_${accountUsername}`;
const { data: previewBatch } = await supabase
  .from('preview_batches')
  .insert({
    preview_id: batchId,
    account_username: accountUsername,
    posts: [post],
    created_at: new Date().toISOString(),
    expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
  });
```

5. **Send to Slack**:
```javascript
const previewData = {
  previewUrl: `https://easypost.fun/postpreview/${batchId}`,
  downloadUrl: `https://easypost.fun/postpreview/download/${batchId}`
};
const payload = slackAPI.buildSlackPayload(accountUsername, post, previewData);
await slackAPI.sendToSlack(payload);
```

### üéØ Expected Results
- **10 Diverse Images**: Mix of aesthetics (streetwear, vintage, minimalist)
- **Real Database IDs**: Actual image IDs like 884, 824, 724, etc.
- **Interactive Preview**: Working preview and download buttons
- **Rich Slack Message**: Proper formatting with thumbnails

### üìÅ Reference Files
- [generate-real-content.js](mdc:generate-real-content.js) - Working implementation
- [src/slack/index.js](mdc:src/slack/index.js) - Slack integration
- [check-account-profiles.js](mdc:check-account-profiles.js) - Account verification

### üö® Key Success Factors
1. **Direct database access** - Don't use complex generators
2. **Account profile integration** - Use `account_profiles` table
3. **Simple image selection** - Random shuffle, take first 10
4. **Preview batch creation** - Essential for Slack integration
5. **Real image variety** - Mix aesthetics, don't filter too much

### üí° Best Practices
- Always verify account exists in `account_profiles` first
- Use account's aesthetic focus for initial filtering
- Fall back to any images if no matches found
- Create preview batch before sending to Slack
- Test with `node generate-real-content.js` to verify working
